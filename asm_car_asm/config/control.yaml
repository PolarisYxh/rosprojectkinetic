# husky_joint_publisher:
#   type: "joint_state_controller/JointStateController"
#   publish_rate: 50

# husky_velocity_controller:
#   type: "diff_drive_controller/DiffDriveController"
#   left_wheel: ['FrontLeftJoint1','FrontLeftJoint2','BackLeftJoint1','BackLeftJoint2']
#   right_wheel: ['FrontRightJoint1','FrontRightJoint2','BackRightJoint1','BackRightJoint2']
#   publish_rate: 50
#   pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
#   twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
#   cmd_vel_timeout: 0.25
#   velocity_rolling_window_size: 2

#   # Base frame_id
#   base_frame_id: base_link

#   # Odometry fused with IMU is published by robot_localization, so
#   # no need to publish a TF based on encoders alone.
#   enable_odom_tf: false

#   # Husky hardware provides wheel velocities
#   estimate_velocity_from_position: false

#   # Wheel separation and radius multipliers
#   wheel_separation_multiplier: 1.5 # default: 1.0
#   wheel_radius_multiplier    : 1.0 # default: 1.0

#   # Velocity and acceleration limits
#   # Whenever a min_* is unspecified, default to -max_*
#   linear:
#     x:
#       has_velocity_limits    : true
#       max_velocity           : 2.0   # m/s
#       has_acceleration_limits: true
#       max_acceleration       : 3.0   # m/s^2
#   angular:
#     z:
#       has_velocity_limits    : true
#       max_velocity           : 2.0   # rad/s
#       has_acceleration_limits: true
#       max_acceleration       : 6.0   # rad/s^2

husky_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

husky_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  right_wheel: ['FrontLeftJoint1','FrontLeftJoint2','BackLeftJoint1','BackLeftJoint2']
  left_wheel: ['FrontRightJoint1','FrontRightJoint2','BackRightJoint1','BackRightJoint2']
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 1000000.0, 1000000.0, 0.03]
  cmd_vel_timeout: 0.25
#wheel_radius
  wheel_separation : 0.690
  wheel_radius : 0.2325
  k_l: 0.1
  k_r: 0.1


  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: false

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.0 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 2.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 20.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 4.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 25.0   # rad/s^2





husky_fl_joint_position_controller:
  type: effort_controllers/JointPositionController
  joint: FrontLeftJoint
  pid: {p: 100.0, i: 0.01, d: 1.0}

husky_fr_joint_position_controller:
  type: effort_controllers/JointPositionController
  joint: FrontRightJoint
  pid: {p: 100.0, i: 0.01, d: 1.0}

husky_bl_joint_position_controller:
  type: effort_controllers/JointPositionController
  joint: BackLeftJoint
  pid: {p: 100.0, i: 0.01, d: 1.0}

husky_br_joint_position_controller:
  type: effort_controllers/JointPositionController
  joint: BackRightJoint
  pid: {p: 100.0, i: 0.01, d: 1.0}

husky_kinect_joint_position_controller:
  type: effort_controllers/JointPositionController
  joint: kinect_joint
  pid: {p: 100.0, i: 0.01, d: 1.0}